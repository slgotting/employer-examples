#!/usr/bin/env python3
import json
import subprocess
import os
import argparse
from argparse import RawTextHelpFormatter
from logger_slg import init_logger
import yaml
from pprint import pformat
from alpha_vantage import AlphaVantage

# this section is here because when we pass in a config file we also want to include those variables as potential arguments
# and required=True in the argparse arguments would not allow that to happen.
# So from now on I'm using these two sections to verify arguments are up to standard
REQUIRED_ARGUMENTS = ['config_filepath']
SENSITIVE_ARGUMENTS = [] # place any passwords or other sensitive arguments in here to not expose them in configuration printing
SPECIAL_REQUIREMENTS = { # variable must return a truthy value for these lambda functions in order to proceed with running the script; follow the example requirements precedence for setting new requirements
    'config_filepath': [
        {
            'name': 'Filepath is an absolute filepath',
            'requirement': lambda value: value.startswith('/')
        },
    ]
}

FILEPATH = f'{os.path.abspath(os.path.dirname(__file__))}/{__file__}'

def get_arguments():
    parser = argparse.ArgumentParser(description='', formatter_class=RawTextHelpFormatter)

    parser.add_argument('-c', '--config_filepath', help='Absolute path to config file (.yml)', default="/home/steven/ai/stocks/alpha-vantage/config/time_period_30.yml")
    parser.add_argument('-s', '--stock_symbols_filepath', help='Absolute path to line by line symbols text file (.txt)', default="/home/steven/ai/stocks/alpha-vantage/stock-list")
    parser.add_argument('-o', '--output_directory', help='Absolute path to line by line symbols text file', default="/home/steven/ai/stocks/alpha-vantage/data")
    parser.add_argument('-i', '--current_index_filepath', help='Abs path to current index of stock symbol we are on', default="/home/steven/ai/stocks/alpha-vantage/data/current_index")
    parser.add_argument('-L', '--log_level', help='Log level (default: INFO)', default="INFO")
    parser.add_argument('-l', '--log_path', help='Path to logging output', default=f'/home/steven/ai/stocks/alpha-vantage/data/time_period_30/logs/{__file__.split("/")[-1]}.log')
    args = parser.parse_args()

    return args

def build_true_configuration(args, config_filepath=None):
    # arguments defined at the command line take precedence over config file variables
    config = {}
    if config_filepath:
        config = read_config_file(config_filepath)

    dict_args = vars(args)
    for arg in dict_args:
        if dict_args[arg] is not None:
            config[arg] = dict_args[arg]

    return config

def strip_sensitive_arguments(config):
    return {k: v for k, v in config.items() if k not in SENSITIVE_ARGUMENTS}

def guarantee_requirements_met(config):
    # config is the config object after assigning arg values to the config file values

    # first iterate over required arguments
    for argument in REQUIRED_ARGUMENTS:
        if not config.get(argument):
            logger.error(f'\n\nRequired argument "{argument}" not found. Exiting...')
            exit(0)

    # then iterate over the special requirements
    for argument in SPECIAL_REQUIREMENTS:
        value = config.get(argument)
        for requirement_obj in SPECIAL_REQUIREMENTS[argument]:
            if not requirement_obj['requirement'](value):
                logger.error(f'\n\nSpecial requirement "{requirement_obj["name"]}" was not met for the argument "{argument}". Exiting...')
                exit(0)

def read_config_file(filepath):
    try:
        with open(filepath, 'r') as stream:
            try:
                config = yaml.safe_load(stream)
                return config
            except yaml.YAMLError as exc:
                print(exc)
                logger.error('\n\nYAML Error. Exiting...')
                exit(0)
    except FileNotFoundError:
        logger.exception('Config file not found. Proceeding with defaults')
        return {}

if __name__ == '__main__':
    args = get_arguments()
    try:
        logger = init_logger(
            name=__name__,
            log_path=args.log_path,
            log_level=args.log_level
        )
        config = build_true_configuration(args, args.config_filepath)
        guarantee_requirements_met(config)
        sensitive_stripped_config = strip_sensitive_arguments(config)
        # logger.info(f'\nUsing configuration:\n\n{pformat(sensitive_stripped_config)}')

        av = AlphaVantage(config_filepath=config.get('config_filepath'), log_filepath=args.log_path)

        stock_symbols_filepath = config.get('stock_symbols_filepath')
        current_index_filepath = config.get('current_index_filepath')
        output_directory = config.get('output_directory')

        with open(stock_symbols_filepath, 'r') as f:
            all_symbols = [line.strip() for line in f.readlines()]

        if not os.path.exists(output_directory):
            os.mkdir(output_directory)

        with open(stock_symbols_filepath, 'r') as f:
            symbols = [symbol.strip() for symbol in f.readlines()]
            logger.debug(f'First 10 symbols: {symbols[:10]}')

        with open(current_index_filepath, 'r') as f:
            index = int(f.readlines()[0])
            logger.debug(f'Index: {index}')

        symbol = symbols[index]
        logger.debug(f'Symbol: {symbol}')

        logger.info(f'Starting data collection for {symbol}...')
        try:
            json_data = av.get_all_data(symbol)
        except:
            logger.exception(f"Failed to get all data for symbol: {symbol}")
            exit(1)
        output_filepath = f'{output_directory}/{symbol}.json'
        with open(output_filepath, 'w') as f:
            try:
                f.write(json.dumps(json_data))
                logger.info(f'Successfully acquired and saved all indicator data for stock: {symbol}')
                with open(current_index_filepath, 'w') as f:
                    f.write(str(index + 1))
            except:
                logger.exception(f'Unknown error writing data to file for symbol {symbol}')

    except:
        logger.exception('An error occurred')
